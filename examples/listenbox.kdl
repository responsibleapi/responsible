responsible syntax=1

info {
    title "Listenbox"
    version "0.1"
    termsOfService "/terms"
}

servers {
    url "https://api.listenbox.app"
    url "http://localhost:8080"
}

type "FeedID" "string" length=11
type "ItemID" "string" length=11
type "ShowID" "string" minLength=11 maxLength=12
type "StripeCheckoutID" "string" minLength=1

struct "SubmitReq" {
    url "httpURL"
}

struct "UrlResp" {
    url "httpURL"
}

enum "Plan" {
    free
    basic
    creator
}

struct "UserResp" {
    email "email"
    plan "Plan"
    trialed "boolean"
    updates "boolean"
}

struct "RecentResp" {
    list "array" minItems=0 {
        struct {
            id "ShowID"
            feed_id "FeedID"
            title "string"
            episodes "nat32"
            (?)image "httpURL"
            (?)refreshed_utc "utcMillis"
            (?)author "string"
            (?)owner "string"
        }
    }
    plan "Plan"
}

struct "ErrorStruct" {
    type "string" minLength=1
    message "string" minLength=1
    (?)causeType "string" minLength=1
    (?)causeMessage "string" minLength=1
}

struct "ITunesCategory" {
    category "string" minLength=1
    (?)subcategory "string" minLength=1
}

enum "YouTubeFeedType" {
    video
    playlist
    channel
}

struct "Show" {
    id "ShowID"
    feed_id "FeedID"
    audioFeedURL "httpURL"
    description "string"
    episodes "nat32"
    language "string"
    title "string"
    (?)type "YouTubeFeedType"
    videoFeedURL "httpURL"
    youtubeURL "httpURL"
    (?)analyticsPrefix "httpURL"
    (?)author "string"
    (?)copyright "string"
    (?)explicit "boolean"
    (?)image "httpURL"
    (?)keywords "string"
    (?)owner "string"
    (?)ownerEmail "email"
    (?)primaryCategory "ITunesCategory"
    (?)secondaryCategory "ITunesCategory"
    (?)refreshedUTC "utcMillis"
    (?)reverse "boolean"
    (?)website "httpURL"
}

struct "Show2" {
    show "Show"
    items "array" "JsonItem"
    (?)user "UserResp"
    pagination "PaginationResp"
}

struct "EditShowReq" {
    explicit "boolean"
    language "string"
    owner "string"
    ownerEmail "email"
    (?)analyticsPrefix "httpURL"
    (?)author "string"
    (?)category1 "string"
    (?)category2 "string"
    (?)copyright "string"
    (?)description "string"
    (?)image "httpURL"
    (?)keywords "string"
    (?)subcategory1 "string"
    (?)subcategory2 "string"
    (?)title "string"
    (?)website "httpURL"
}

struct "JsonItem" {
    id "ItemID"
    title "string"
    webpage_url "httpURL"
    pub_date_utc "utcMillis"
    audio_url "httpURL"
    mime "mime"

    (?)duration_seconds "seconds"
    (?)image "httpURL"
    (?)author "string"
}

struct "PaginationResp" {
    hasBefore "boolean" deprecated=true description="newBefore is enough"
    hasAfter "boolean" deprecated=true description="newAfter is enough"
    (?)newBefore "ItemID"
    (?)newAfter "ItemID"
}

struct "ItemsResp" {
    items "array" "JsonItem" minItems=0
    total "nat32"
}

struct "ItemsResp2" {
    items "array" "JsonItem" minItems=0
    pagination "PaginationResp"
}

struct "PreSignedUploadURL" {
    fileUrl "httpURL"
    uploadUrl "httpURL"
    headers "dict" "string" "string"
}

struct "DownloadsChart" {
    list "array" minItems=0 {
        struct {
            day "utcMillis"
            downloads "nat32"
        }
    }
    total "nat64"
}

struct "ReverseReq" {
    showID "ShowID"
    value "boolean"
}

struct "ReverseResp" {
    value "boolean"
}

struct "LoginReq" {
    email "email"
    host "string" minLength=1
}

GET "/api/health" head=true {
    name "health"

    res {
        "200" "unknown"
    }
}

* {
    res {
    // added to every operation
        "400" {
            header "Content-Length" "int32" minimum=1
            body "application/json" "ErrorStruct"
        }
    }
}

scope "/japi" {

    * {
        req {
            mime "application/json"
        }

        res {
        // added to matching operations
            "200..299" {
                mime "application/json"
                header "Content-Length" "int32" minimum=1
            }
        }
    }

    POST "/login" {
        name "requestOtp"

        req "LoginReq"

        res {
            "200" "struct" {
                login "enum" {
                    NEW
                    EXISTING
                }
            }
        }
    }

    POST "/otp" {
        name "submitOtp"

        req "struct" {
            email "email"
            otp "string" minLength=1
            (?)updates "boolean"
        }

        res {
            "201" "struct" {
                jwt "string" minLength=1
            }

            "401" {
                description "Incorrect OTP"
            }
        }
    }

    POST "/submit" {
        name "submitUrl"

        req {
            (?)security {
                header "authorization"
            }

            body "SubmitReq"
        }

        res {
            "200" "struct" {
                showID "ShowID"
                (?)plan "Plan"
            }

            "401" {
                description "Submitting playlists requires a login"
            }
            "404" "unknown"
        }
    }

    scope "/show/:show_id(ShowID)" {

        * {
            res {
                "404" "unknown"
            }
        }

        GET deprecated=true {
            name "getShow"
            res {
                "200" "Show"
            }
        }

        GET "/v2" {
            name "getShow2"

            req {
                (?)security {
                    header "authorization"
                }

                query {
                    (?)before "ItemID"
                    (?)after "ItemID"
                }
            }

            res {
                "200" "Show2"
            }
        }

        GET "/items2" {
            name "getItems2"

            req {
                query {
                    (?)before "ItemID"
                    (?)after "ItemID"
                }
            }

            res {
                "200" "ItemsResp2"
            }
        }

        GET "/items" deprecated=true {
            name "getItems"

            req {
                query {
                    (?)before "dateTime"
                    (?)limit "int32" minimum=1
                }
            }

            res {
                "200" "ItemsResp"
            }
        }
    }

    struct "WorkerEvent" {
        url "httpURL"
        headers "dict" "string" "string"
        timestamp "utcMillis"
    }

    POST "/cdn_log" {
        name "logCDN"

        req {
            body "WorkerEvent"

        // workaround for a current worker to avoid redeploying it üòè
            body "text/plain" "WorkerEvent"
        }

        res {
            "201" {
                (?)header "Content-Length" "int32" minimum=0 maximum=0
            }
        }
    }

    scope "/auth" {
        * {
            req {
                security {
                    header "authorization"
                }
            }

            res {
                "401" "unknown"
            }
        }

        POST "/unsubscribe" {
            name "unsubscribe"
            description "Unsubscribe the email from product updates"

            req "struct" {
                email "email"
            }

            res {
                "200" "unknown"
            }
        }

        scope "/user" {

            GET {
                name "getUser"
                res {
                    "200" "UserResp"
                }
            }

            POST {
                name "patchUser"
                req "struct" {
                    updates "boolean"
                }
                res {
                    "200" "UserResp"
                }
            }

            DELETE {
                name "deleteUser"

                res {
                    "200" "unknown"
                }
            }

            GET "/:email(email)/shows" {
                name "showsByEmail"

                res {
                    "200" "array" {
                        "struct" {
                            id "ShowID"
                            title "string" minLength=1
                        }
                    }
                }
            }
        }

        GET "/recent" {
            name "recentFeeds"
            res {
                "200" "RecentResp"
            }
        }

        enum "PlanInterval" {
            month
            year
        }

        POST "/checkout" {
            name "stripeCheckout"
            description "Redirect to the checkout page or to billing if already subscribed"

            req "struct" {
                plan "Plan"
                interval "PlanInterval"
                success_url "httpURL"
                cancel_url "httpURL"
            }

            res {
                "201" "UrlResp"
            }
        }

        POST "/billing" {
            name "stripeBilling"

            req "struct" {
                return_url "httpURL"
            }

            res {
                "201" "UrlResp"
            }
        }

        scope "/show/:show_id(ShowID)" {

            * {
                res {
                    "403" "unknown"
                    "404" "unknown"
                }
            }

            PUT {
                name "editShow"

                req {
                    body "EditShowReq"
                }

                res {
                    "200" "Show"
                }
            }

            DELETE {
                name "deleteFeed"

                res {
                    "200" "unknown"
                }
            }

            GET "/downloads" {
                name "getDownloads"

                req {
                    (?)query "timezone" "string" minLength=1
                }

                res {
                    "200" "DownloadsChart"
                }
            }

            GET "/episode_downloads" {
                name "episodeDownloads"

                res {
                    "200" "array" {
                        struct {
                            title "string"
                            url "httpURL"
                            downloads "nat32"
                        }
                    }
                }
            }
        }

        scope "/later" {

            GET deprecated=true {
                name "getLater"
                res {
                    "200" "Show"
                }
            }

            GET "/v2/v2" {
                name "getLater2"

                req {
                    query {
                        (?)before "ItemID"
                        (?)after "ItemID"
                    }
                }

                res {
                    "200" "Show2"
                }
            }

            POST {
                name "submitLater"
                req "SubmitReq"
                res {
                    "200" "Show"
                    "402" "unknown"
                }
            }

            scope "/:item_id(ItemID)" {

                POST {
                    name "addLater"
                    req "unknown"
                    res {
                        "200" "unknown"
                        "402" "unknown"
                    }
                }

                DELETE {
                    name "removeLater"
                    res {
                        "200" "unknown"
                    }
                }
            }
        }

        GET "/s3_presign_image" {
            name "preSignedImageUploadURL"

            req {
                query "filename" "string" minLength=1
            }

            res {
                "200" "PreSignedUploadURL"
                "402" "unknown"
            }
        }

        POST "/reverse" {
            name "reversePlaylist"
            req "ReverseReq"
            res {
                "200" "ReverseResp"
                "403" "unknown"
            }
        }
    }
}

scope "/oauth/google" {

    GET {
        name "googleSlash"

        res {
            "302" {
                header "location" "httpURL"
            }
        }
    }

    GET "/callback" {
        name "googleCallback"

        req {
            query "code" "string" minLength=1
        }

        res {
            "302" {
                header "location" "httpURL"
                cookie "token" "string" minLength=1
            }
        }
    }
}

enum "AudioVideo" {
    audio
    video
}

GET "/rss/:show_id(ShowID)/:type(AudioVideo).rss" head=true {
    name "rss"

    res {
        "200" {
            headers {
                "Content-Length" "int32" minimum=1
                "ETag" "string" minLength=1
                "Cache-Control" "string" enum="no-cache"
                "CDN-Cache-Control" "string" enum="max-age=2147483647"
                (?)"Last-Modified" "string" minLength=1
            }
            body "application/rss+xml" "string" minLength=1
        }

    // when show.video_redirect_url
        "302" {
            header "Location" "httpURL"
        }

        "403" "unknown"
        "404" "unknown"
    }
}

type "NonEmptyString" "string" minLength=1

// TODO support range=true
GET "/a/:item_id(ItemID).:ext(NonEmptyString)" head=true {
    name "audio"

    req {
        (?)header "CF-Connecting-IP" "string" minLength=1
    }

    res {
        "200" {
            header "Cache-Control" "string" minLength=1
            header "Content-Length" "int32" minimum=1
            body "audio/*" "binary"
        }
        "404" "unknown"
    }
}

GET "/w/:item_id(ItemID).:ext(NonEmptyString)" head=true {
    name "video"

    req {
        (?)header "CF-Connecting-IP" "string" minLength=1
    }

    res {
        "302" {
            header "Location" "httpURL"
            header "Cache-Control" "string" minLength=1
        }
        "404" "unknown"
    }
}

POST "/stripe/hooks" {
    name "stripeWebhook"

    req {
        header "Stripe-Signature" "string" minLength=1
        body "application/json" "struct"
    }

    res {
        "200" "unknown"
    }
}

scope "/youtube/hooks" {

    GET {
        name "verifyYouTubeHook"

        req {
            (?)query "hub.challenge" "string" minLength=1
            (?)query "hub.lease_seconds" "int32" minimum=1
        }

        res {
            "200" "unknown"
        }
    }

    POST {
        name "postYouTubeHook"

        req {
            header "Link" "string" minLength=1
            (?)body "*/*" "unknown"
        }

        res {
            "200" "unknown"
        }
    }
}
