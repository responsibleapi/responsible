responsible syntax=1

info {
    title "youtube"
    version "3"
}

servers {
    url "https://www.googleapis.com/youtube/v3"
}

* {
    req {
        security {
            query "key"
        }
    }

    res {
        mime "application/json"

        "401" "unknown"
    }
}

// youtube video id
type "VideoID" "string" minLength=1

// youtube playlust id
type "PlaylistID" "string" minLength=1

type "VideoIDs" "array" "VideoID"

enum "Part" {
    id
    contentDetails
    snippet
    statistics
}

type "Parts" "array" "Part"

type "Videos" "struct"
type "PlaylistItems" "struct"
type "Playlists" "struct"

struct "Thumbnail" {
    (?)height "int32"
    (?)url "string"
    (?)width "int32"
}

// TODO struct nesting

struct "Item" {
    id "string"
    (?)contentDetails "ContentDetails"
    (?)etag "string"
    (?)kind "string"
    (?)snippet "Snippet"
}

struct "RelatedPlaylists" {
    uploads "string"
    (?)watchHistory "string"
    (?)watchLater "string"
}

struct "ContentDetails" {
    relatedPlaylists "RelatedPlaylists"
}

struct "Localized" {}

struct "Snippet" {
    (?)country "string"
    (?)customUrl "string"
    (?)description "string"
    (?)localized "Localized"
    publishedAt "utcMillis"
    (?)thumbnails "dict" "string" "Thumbnail"
    title "string"
}

struct "PageInfo" {}

struct "Channels" {

    etag "string"
    items "array" "Item" minItems=0
    kind "string"
    pageInfo "PageInfo"
}

scope "/videos" {
    POST {

    }

    GET {
        req {
            query {
                id "VideoIDs"
                maxResults "int32" default=50
                part "Parts"
            }
        }
        res {
            "200" "Videos"
        }
    }
}

GET "/playlistItems" {
    req {
        query {
            playlistId "PlaylistID"
            (?)pageToken "string"
            maxResults "int32" default=50
            part "Parts"
        }
    }
    res {
        "200" "PlaylistItems"
    }
}

GET "/playlists" {
    req {
        query {
            id "PlaylistID"
            part "Parts"
        }
    }
    res {
        "200" "Playlists"
    }
}

GET "/channels" {
    req {
        query {
            id "string"
            part "Parts"
            (?)forUsername "string" minLength=1
        }
    }
    res {
        "200" "Channels"
    }
}
